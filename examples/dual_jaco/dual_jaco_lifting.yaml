##
#
# This file contains parameters for an example where a single jaco arm pushes a
# box. 
#
##

# Initial state
q_init : [1.57, 1.9, 0.0, 5.0,-1.0, 4.2, 0.0,   # left arm positions
          1.57, 1.9, 0.0, 5.0, 1.0, 4.2, 0.0,   # right arm positions
          1.0, 0.0, 0.0, 0.0,                   # box orientation
          0.5, 0.0, 0.08]                       # box position
v_init : [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
          0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
          0.0, 0.0, 0.0, 0.0, 0.0, 0.0]

# Initial guess. The initial sequence of generalized positions is generated by
# linearly iterpolating between q_init and q_guess.
q_nom_start : [1.67, 1.9, 0.0, 5.0,-1.0, 4.2, 0.0,
               1.47, 1.9, 0.0, 5.0, 1.0, 4.2, 0.0,
               1.0, 0.0, 0.0, 0.0,
               0.5, 0.0, 0.3]
q_nom_end : [1.67, 1.9, 0.0, 5.0,-1.0, 4.2, 0.0,
             1.47, 1.9, 0.0, 5.0, 1.0, 4.2, 0.0,
             1.0, 0.0, 0.0, 0.0,
             0.5, 0.0, 0.3]

q_guess : [1.67, 1.9, 0.0, 5.0,-1.0, 4.2, 0.0,
           1.47, 1.9, 0.0, 5.0, 1.0, 4.2, 0.0,
           1.0, 0.0, 0.0, 0.0,
           0.5, 0.0, 0.08]

# Cost Weights
Qq: [1, 1, 1, 1, 1, 1, 1,
     1, 1, 1, 1, 1, 1, 1,
     1, 1, 1, 1,
     10, 10, 10]
Qv: [1, 1, 1, 1, 1, 1, 1,
     1, 1, 1, 1, 1, 1, 1,
     0.1, 0.1, 0.1,
     0.1, 0.1, 0.1]
R: [1e-3, 1e-3, 1e-3, 1e-3, 1e-3, 1e-3, 1e-3,
    1e-3, 1e-3, 1e-3, 1e-3, 1e-3, 1e-3, 1e-3,
    1e3, 1e3, 1e3,
    1e3, 1e3, 1e3]

Qfq: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
      0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
      10, 10, 10, 10,
      10, 10, 20]
Qfv: [1, 1, 1, 1, 1, 1, 1,
      1, 1, 1, 1, 1, 1, 1,
      1, 1, 1,
      1, 1, 1]

# Problem definition parameters
time_step : 0.05    # Discretization timestep (seconds)
num_steps : 20      # number of timesteps

# Solver parameters
max_iters : 50              # maximum Gauss-Newton iterations
method : "trust_region"     # solver method, {linesearch, trust_region}
scaling : true
equality_constraints : false
num_threads : 20

tolerances:
  rel_cost_reduction: 0
  abs_cost_reduction: 0
  rel_gradient_along_dq: 0
  abs_gradient_along_dq: 0
  rel_state_change: 0
  abs_state_change: 0

# Method used to compute gradients of inverse dynamics, one of
# {forward_differences, central_differences, central_differences4, autodiff}
gradients_method: "forward_differences"

# Playback/visualization parameters
play_target_trajectory : false
play_initial_guess : false
play_optimal_trajectory : true

# Debugging parameters
linesearch_plot_every_iteration : false
print_debug_data : false
save_solver_stats_csv : true

# Contact model parameters. 
contact_stiffness : 500
dissipation_velocity : 0.1
smoothing_factor : 0.01

# Friction
friction_coefficient : 1.0  # Coefficient of friction.
stiction_velocity: 0.05     # Regularization velocity, in m/s.

# MPC parameters
mpc : false
mpc_iters : 1 
controller_frequency : 20
sim_time : 10
sim_time_step : 5e-3
sim_realtime_rate : 0.0
feed_forward : false
Kp: [500, 500, 250, 500, 250, 250, 250,
     500, 500, 250, 500, 250, 250, 250,
     0, 0, 0, 0, 0, 0, 0]
Kd: [50, 50, 25, 50, 25, 25, 25,
     50, 50, 25, 50, 25, 25, 25,
     0, 0, 0, 0, 0, 0]
